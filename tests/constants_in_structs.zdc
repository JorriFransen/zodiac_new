
std :: import std;

#run main();

Buffer :: struct {
    CAPACITY :: 32;

    used : s64;
    data : [CAPACITY]u8;

    append :: func (b: *Buffer, str: *u8) {
        len := std.strlen(str);
        @assert(b.used + len < CAPACITY);

        for (i := 0; i < len; i += 1) {
            b.data[b.used] = str[i];
            b.used += 1;
        }
    }

    print :: func (b: *Buffer) {
        std.print("Buffer content: \"");
        std.print_len(*b.data[0], b.used);
        std.print("\"\n");
    }
};

main :: func() -> s64 {

    std.println("Constants in structs");

    b : Buffer;
    b.used = 0;

    std.print("b.CAPACITY: ");
    std.print_numln(b.CAPACITY);
    std.print("Buffer.CAPACITY: ");
    std.print_numln(Buffer.CAPACITY);

    @assert(@sizeof(Buffer) == @sizeof(u8) * Buffer.CAPACITY + @sizeof(b.used));
    @assert(@sizeof(Buffer) == Buffer.CAPACITY + @sizeof(b.used));
    @assert(@sizeof(Buffer) == 40);

    @assert(@sizeof(Buffer) == @sizeof(b.data) + @sizeof(b.used));

    Buffer.append(*b, "test");
    b.append(*b, "-abcd");

    b.print(*b);

    return 0;
}
