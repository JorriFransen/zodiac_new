
std :: import std;

#run main();

Dummy :: struct
{
    val : s64;
}

Vec2 :: struct
{
    x : s64;
    y : s64;
}

Rect :: struct
{
    p1 : Vec2;
    p2 : Vec2;
}

main :: func() -> s64
{
    std.print("Struct assignment test\n");

    member_assignment();
    member_struct_assignment();

    // v1 := make_vec2(11, 22);

    // r1 : Rect;
    // r1.p1 = v1;

    // v1.y = 66;

    // r1.p2 = make_vec2(33, 44);

    // return r1.p2.x + r1.p2.y;

    return 0;
}

member_struct_assignment :: func ()
{
    r1 := make_rect(11, 22, 33, 44);
    @assert(r1.p1.x == 11);
    @assert(r1.p1.y == 22);
    @assert(r1.p2.x == 33);
    @assert(r1.p2.y == 44);
    std.print("r1: ");
    print_rect(r1);
}

member_assignment :: func ()
{
    std.print("Member assignment\n");

    a := make_vec2(11, 22);
    @assert(a.x == 11);
    @assert(a.y == 22);

    b := a;
    @assert(b.x == 11);
    @assert(b.y == 22);

    b.x *= 2;
    b.y *= 2;
    @assert(b.x == 22);
    @assert(b.y == 44);
    @assert(a.x == 11);
    @assert(a.y == 22);

    c : Vec2;
    c.x = 12345678;
    c.y = 87654321;
    @assert(c.x == 12345678);
    @assert(c.y == 87654321);

    c = b;
    @assert(c.x == 22);
    @assert(c.y == 44);

    std.print("a: ");
    print_vec2_p(*a);

    std.print("b: ");
    print_vec2(b);

    std.print("c: ");
    print_vec2(c);

    std.print("\n");
}

make_vec2 :: func (x: s64, y: s64) -> Vec2
{
    r : Vec2;
    r.x = x;
    r.y = y;
    return r;
}

print_vec2_p :: func(v : *Vec2)
{
    std.print("x: ");
    std.print_num(v.x);
    std.print(", y: ");
    std.print_numln(v.y);
}

print_vec2 :: func(v : Vec2)
{
    std.print("x: ");
    std.print_num(v.x);
    std.print(", y: ");
    std.print_numln(v.y);
}

make_rect :: func (p1x: s64, p1y: s64, p2x: s64, p2y: s64) -> Rect
{
    result : Rect;

    result.p1 = make_vec2(p1x, p1y);
    result.p2 = make_vec2(p2x, p2y);
    return result;
}

print_rect :: func (r : Rect)
{
    std.print("{ p1: {");
    std.print("x: ");
    std.print_num(r.p1.x);
    std.print(", y: ");
    std.print_num(r.p1.y);
    std.print("}, p2: {");
    std.print("x: ");
    std.print_num(r.p2.x);
    std.print(", y: ");
    std.print_num(r.p2.y);
    std.print(" }\n");
}
