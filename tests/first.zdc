
Vec2 :: struct 
{
    x : s64;
    y : s64;
}

print_num :: func (n: s64)
{
    buf : [32]s64;
    i := 0;
    while (n > 0)
    {
        nc := n % 10; 
        //buf[i] = nc + 48;
        i = i + 1;
        n = n / 10;
    }

    while (i > 0)
    {
        //@syscall(1, 1, *buf[i - 1], 1);
        i = i - 1;
    }
}

print_vec2 :: func (v: *Vec2) 
{
    @syscall(1, 1, "x: ", 3);
    print_num(v.x);
    @syscall(1, 1, ", y: ", 3);
    print_num(v.y);
    return;
}

add_vec2 :: func (v: *Vec2) -> s64
{

    return v.x + v.y;
}

main :: func () -> s64
{
    // 1 = sys_write (syscall num)
    // 1 = stdout_fileno
    a := 65;
    @syscall(1, 1, "Hello World!", 12);
    nl := 10;
    @syscall(1, 1, *nl, 1);
    p1 : Vec2;
    p1.x = 33;
    p1.y = 44;

    print_vec2(*p1);
    return add_vec2(*p1);
}

#foreign #noreturn ExitProcess :: func (exit_code: u32) -> void

mainCRTStartup :: func () -> s32
{
    exit_code := main();
    @exit(exit_code);
}

#naked #noreturn _start :: func ()
{
    posix_call_main_and_exit();
}

#noreturn posix_call_main_and_exit :: func ()
{
    exit_code := main();
    @exit(exit_code);
}
