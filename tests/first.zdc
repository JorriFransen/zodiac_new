
std :: import std;
math :: import math;

print_vec2 :: func (v: *math.Vec2)
{
    std.print("x: ");
    std.print_num(v.x);
    std.print(", y: ");
    std.print_num(v.y);
    std.println(" ");
    return;
}

add_vec2 :: func (v: *math.Vec2) -> s64
{
    return v.x + v.y;
}

main :: func () -> s64
{
    count := 4;
    while (count > 0)
    {
        if (count == 4)
        {
            std.println("Welcome!");
        }
        else if (count == 3)
        {
            std.println("Welcome 2");
        }
        else
        {
            std.println("Again...??");
        }

        std.println("Hello World!");
        count = count - 1;
    }

    print_alphabet := true;
    print_vector : bool = false;

    if (print_alphabet)
    {
        count = 26;
        c := 65;
        while (count > 0)
        {
            @syscall(1, 1, *c, 1);
            c = c + 1;
            count = count - 1;
        }
        std.println(" ");
    }
    else
    {
        std.println("Not printing alphabet");
    }

    if (print_vector)
    {
        p1 : math.Vec2;
        p1.x = 33;
        p1.y = 44;

        print_vec2(*p1);
        p1.y = 55;
        print_vec2(*p1);
    }
    else
    {
        std.println("Not printing vector...");
    }
    return 0;
}

#foreign #noreturn ExitProcess :: func (exit_code: u32) -> void

mainCRTStartup :: func () -> s32
{
    exit_code := main();
    @exit(exit_code);
}

#naked #noreturn _start :: func ()
{
    posix_call_main_and_exit();
}

#noreturn posix_call_main_and_exit :: func ()
{
    exit_code := main();
    @exit(exit_code);
}

