
std :: import std;
math :: import math;

using math;

print_vec2 :: func (v: *Vec2)
{
    std.print("x: ");
    std.print_num(v.x);
    std.print(", y: ");
    std.print_num(v.y);
    std.println(" ");
    return;
}

Vec2_Ptr :: typedef *Vec2;

add_vec2 :: func (v: Vec2_Ptr) -> s64
{
    return v.x + v.y;
}

glob_int_const : s64 : 5;

// global_int := 4 + 1;
global_int : s64;

#run main();

main :: func () -> s64
{
    int_ptr : *s64 = null;
    x : s64 = 55;
    int_ptr = *x;

    std.print("x: ");
    std.print_num(x);
    std.print("\n");

    @assert(<int_ptr == x);

    std.print("<int_ptr: ");
    std.print_num(<int_ptr);
    std.print("\n");

    std.print("glob_int_const: ");
    @assert(glob_int_const == 5);
    std.print_num(glob_int_const);
    std.println(" ");
    //glob_int_const = 4; // Illegal

    loc_int_const :: 14;
    std.print("loc_int_const: ");
    std.print_num(loc_int_const);
    std.println(" ");
    //loc_int_const = 1; // Illegal

    @assert(global_int == 0);
    std.print("global_int: ");
    std.print_num(global_int);
    std.println(" ");

    global_int = global_int * 3 + 1;
    @assert(global_int == 1);
    std.print("global_int: ");
    std.print_num(global_int);
    std.println(" ");

    count := 4;
    while (count > 0) {
        if (count == 4) {
            std.println("Welcome!");
        } else if (count == 3) {
            std.println("Welcome 2");
        } else {
            std.println("Again...??");
        }

        std.print("Hello World!\n");
        count = count - 1;
    }

    print_alphabet := true;
    print_vector : bool = true;

    if (print_alphabet) {
        count = 26;
        c : u8 = 65;
        while (count > 0) {
            std.print_char(c);
            c = c + 1;
            count = count - 1;
        }
        std.println(" ");
    } else {
        std.println("Not printing alphabet");
    }

    if (print_vector) {
        p1 : Vec2;
        p1.x = 33;
        p1.y = 44;

        print_vec2(*p1);
        p1.y = 55;
        print_vec2(*p1);
        // return add_vec2(*p1);
        v := return_double(15);
        return v;
    } else {
        std.println("Not printing vector...");
    }

    return 0;
}


return_double :: func(v: int) -> int
{
    return v * 2;
}
