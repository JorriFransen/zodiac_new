
std :: import std;

#run main();

main :: func () -> s64
{
    sp: Super_Player;
    std.print("Struct using test\n");

    e1 := make_entity(1, 2, 3, 4, "e1");
    print_entity(*e1);

    e1.x = 11;
    e1.y = 12;

    print_entity(*e1);

    p1 := make_player("p1", *e1, 100);
    print_player(*p1);

    p1.size.x = 20;
    p1.position.x = 110;
    p1.position.y = 200;
    p1.y = 210;

    print_player(*p1);

    sp.player = make_player("sp", *p1.entity, 200);
    sp.x = 42;
    sp.y = 24;
    _p := *sp.player;
    print_player(_p);

    return 0;
}

Vector :: struct
{
    x: int;
    y: int;
}

Entity :: struct
{
    position: Vector;
    using position;

    size: Vector;

    name: *char;

}

Player :: struct
{
    using entity : Entity;

    companion: *Entity;
    
    health : int;
}

Super_Player :: struct
{
    using player: Player;
}

make_vector :: func(x: int, y: int) -> Vector
{
    result: Vector;

    result.x = x;
    result.y = y;

    return result;
}

make_entity :: func(x: int, y: int, width: int, height: int, name: *char) -> Entity
{
    result: Entity;

    result.position = make_vector(x, y);
    result.size = make_vector(width, height);
    result.name = name;

    return result;
}

print_entity :: func(e: *Entity)
{
    std.print(e.name);
    std.print(" { ");
    std.print_num(e.x);
    std.print(", ");
    std.print_num(e.y);
    std.print(", ");
    std.print_num(e.size.x);
    std.print(", ");
    std.print_num(e.size.y);
    std.print(" }\n");
}

make_player :: func(name: *char, companion: *Entity, health: int) -> Player
{
    result: Player;

    result.entity = make_entity(2, 3, 4, 5, name);
    result.companion = companion;
    result.health = health;

    return result;
}

print_player :: func(p: *Player)
{
    std.print(p.name);
    std.print(" (entity)\n{\n");
    std.print("    { ");
    std.print_num(p.position.x);
    std.print(", ");
    std.print_num(p.position.y);
    std.print(", ");
    std.print_num(p.size.x);
    std.print(", ");
    std.print_num(p.size.y);
    std.print(" }\n");
    std.print("    companion: ");
    print_entity(p.companion);
    std.print("    health: ");
    std.print_num(p.health);
    std.print("\n}\n\n");
}
