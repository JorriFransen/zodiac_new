
std :: import std;

main :: func() -> s64
{
    std.println("for test");

    for (i := 0; i < 10; i++)
    // for (i := 0; i < 10; i += 1)
    // for (i : s64 = 0; i < 10; i = i + 1)
    {
        std.print_num(i);
        std.print("\n");
    }

    std.print("\n");

    for (i := 9; i >= 0; i = i - 1)
    {
        std.print_num(i);
        std.print("\n");
    }

    std.print("\n");

    test_array_for();

    std.print("\n");

    return 0;
}

test_array_for :: func()
{
    INT_COUNT :: 6;
    int_array : [INT_COUNT]s64;
    modify_index := INT_COUNT - 1;

    for (i := 0; i < int_array.count; i = i + 1)
    {
        int_array[i] = (i + 1) * 2;
    }

    for (i := 0; i < int_array.count; i = i + 1)
    {
        print_array_value("int_array", int_array[i], i);

        if (i == modify_index)
        {
            modify_index -= 1;

            int_array[i] = int_array[i] * 2;

            ptr := *int_array[i];
            <ptr = int_array[i] * 2;

            <ptr -= 2;
            int_array[i] /= 2;
        }
    }

    std.print("\n");

    for (int_array)
    {
        print_array_value("int_array", it, it_index);

        if (it_index == modify_index)
        {
            modify_index -= 1;

            int_array[it_index] = it * 2;

            // This has no effect since it is a local copy of an element in the array
            ptr := *it;
            <ptr = it * 5;

            // This has no effect since it is a local copy of an element in the array
            <ptr = it * 10;
        }
    }

    std.print("\n");

    for (v: int_array)
    {
        print_array_value("int_array", v, it_index);

        if (it_index == modify_index)
        {
            modify_index -= 1;

            int_array[it_index] = v * 2;
        }
    }

    std.print("\n");

    for (*v: int_array)
    {
        print_array_value("int_array", <v, it_index);

        if (it_index == modify_index)
        {
            modify_index -= 1;

            <v = <v * 3;
        }
    }

    std.print("\n");

    for (v, i: int_array)
    {
        print_array_value("int_array", v, i);

        if (i == modify_index)
        {
            int_array[i] = v * 2;
        }
    }

    std.print("\n");

    for (int_array)
    {
        print_array_value("int_array", it, it_index);
    }

    return;
}

print_array_value :: func(name: *u8, it: s64, idx: s64)
{
    std.print(name);
    std.print("[");
    std.print_num(idx);
    std.print("] = ");
    std.print_num(it);
    std.print("\n");

    return;
}

#naked #noreturn _start :: func ()
{
    posix_call_main_and_exit();
}

#noreturn posix_call_main_and_exit :: func ()
{
    exit_code := main();
    @exit(exit_code);
}
