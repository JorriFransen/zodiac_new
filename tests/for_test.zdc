
std :: import std;

main :: func() -> s64
{
    std.println("for test");

    for (i : s64 = 0; i < 10; i = i + 1)
    {
        std.print_num(i);
        std.print("\n");
    }

    std.print("\n");

    for (i := 9; i >= 0; i = i - 1)
    {
        std.print_num(i);
        std.print("\n");
    }

    std.print("\n");

    test_array_for();

    std.print("\n");

    return 0;
}

test_array_for :: func()
{
    int_array : [5]s64;

    for (i := 0; i < int_array.count; i = i + 1)
    {
        int_array[i] = (i + 1) * 2;
    }

    for (i := 0; i < int_array.count; i = i + 1)
    {
        print_array_value("int_array", int_array[i], i);
    }

    std.print("\n");

    for (int_array)
    {
        print_array_value("int_array", it, it_index);
    }

    std.print("\n");

    for (v: int_array)
    {
        print_array_value("int_array", v, it_index);
    }

    std.print("\n");

    for (v, i: int_array)
    {
        print_array_value("int_array", v, i);
    }

    return;
}

print_array_value :: func(name: *u8, it: s64, idx: s64)
{
    std.print(name);
    std.print("[");
    std.print_num(idx);
    std.print("] = ");
    std.print_num(it);
    std.print("\n");

    return;
}

#naked #noreturn _start :: func ()
{
    posix_call_main_and_exit();
}

#noreturn posix_call_main_and_exit :: func ()
{
    exit_code := main();
    @exit(exit_code);
}
