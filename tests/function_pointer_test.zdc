std :: import std;

#run main();

#foreign puts :: func(cstr: *u8) -> s32

main :: func() -> s64
{
    std.println("Function pointer test\n");

    f1 := *func1;
    f2 : *func() = *func2;
    f3 := f1;

    f1();
    f2();
    f3();

    std.print("\n");

    call_void_func(f1);
    call_void_func(f2);

    std.print("\n");

    call_void_func(return_fn_ptr(f2));

    print_func("Calling print_func()");
    print_func_ptr := *print_func;
    print_func_ptr("Calling print_func_ptr()");

    print_2_func("Calling print2 func arg 1", "Calling print2 func arg 2");
    print_2_func_ptr := *print_2_func;
    print_2_func_ptr("Calling print2ptr func arg 1", "Calling print2ptr func arg 2");

    print_str_and_int("Printing string and int", 1234);
    print_str_and_int_ptr := *print_str_and_int;
    print_str_and_int_ptr("(ptr) Printing string and int", 1234);

    call_fn_ptr(*print_func, "Calling print_func through call_fn_ptr");
    call_fn_ptr_ptr := *call_fn_ptr;
    call_fn_ptr_ptr(*print_func, "Calling print_func through call_fn_ptr_ptr");

    puts_ptr := *puts;
    puts_ptr("Calling puts through a pointer!");

    // (*puts_ptr)("Calling puts through a pointer!");

    return 0;
}


void_func_p :: typedef *func() -> void;

func1 :: func() {
    std.println("func1");
}

func2 :: func() {
    std.println("func2");
}

call_void_func :: func(func_ptr : void_func_p)
{
    func_ptr();
}

print_func :: func(str: *u8) -> void {
    std.println(str);
}

print_2_func :: func(str1: *u8, str2: *u8) {
    std.println(str1);
    std.println(str2);
}

print_str_and_int :: func(str: *u8, x: int) {
    std.print(str);
    std.print_char(' ');
    std.print_numln(x);
}

print_func_p_type :: typedef *func(str: *u8) ->void;

call_fn_ptr :: func(ptr: print_func_p_type, arg: *u8) {
    ptr(arg);
}

return_fn_ptr :: func(func_ptr : void_func_p) -> void_func_p
{
    return func_ptr;
}
