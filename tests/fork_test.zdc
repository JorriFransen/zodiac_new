std :: import std;
os :: import os;

#foreign waitpid :: func(pid: os.pid_t, status: *s32, options: s32) -> os.pid_t;

#run main();

main :: func() -> int {
    // std.println("Fork test");

    fork_res := os.fork();

    return_value := 0;

    if (fork_res == 0) {
        // Child
        std.println("This is the child");
        std.print("Fork returned: "); std.print_numln(fork_res);
        return_value = 42;
        // os.abort();
    } else {
        // Parent
        status : s32;
        wait_res := waitpid(fork_res, *status, 0);

        std.println("This is the parent");
        std.print("Fork returned: "); std.print_numln(fork_res);
        std.print("Wait returned: "); std.print_numln(wait_res);
        // std.print("Wait status: "); std.print_numln(status);

        if (WIFSIGNALED(status)) {
            signal_status := WTERMSIG(status);
            std.print("Signal status: "); std.print_numln(signal_status);
        }

        if (WIFSTOPPED(status)) {
            stop_status := WSTOPSIG(status);
            std.print("Stop status: "); std.print_numln(stop_status);
        }

        if (WIFEXITED(status)) {
            exit_status := WEXITSTATUS(status);
            std.print("Exit status: "); std.print_numln(exit_status);
        }
    }

    std.println("Print after calling fork");
    return return_value;
}

WEXITSTATUS :: func(status: s32) -> s32 {
    return (status & 65280) >> 8;
}

WTERMSIG :: func(status: s32) -> s32 {
    return status & 127;
}

WSTOPSIG :: func(status: s32) -> s32 {
    return WEXITSTATUS(status);
}

WIFEXITED :: func(status: s32) -> bool {
    return WTERMSIG(status) == 0;
}

WIFSIGNALED :: func(status: s32) -> bool {
    return (((status) & 127) + 1) >> 1 > 1;
}

WIFSTOPPED :: func(status: s32) -> bool {
    return ((status & 255) == 127);
}
