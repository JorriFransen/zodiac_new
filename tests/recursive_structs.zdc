
std :: import std;

#run main();

global_array : [5]s64;

main :: func() -> s64
{
    std.println("Recursive struct test...");

    list := create_int_list();

    for (i := 0; i < 10; i += 1) {
        list_append(*list, i);
    }

    return 0;
}

Int_List :: struct
{
    test  : s64;
    first : *Int_List_Element;
    last  : *Int_List_Element;
}

Int_List_Element :: struct
{
    value : s64;
    next  : *Int_List_Element;
}

_INT_LIST_ELEMENT_COUNT_ :: 16;
_int_list_elements_ : [_INT_LIST_ELEMENT_COUNT_]Int_List_Element;
_next_int_list_index_ := 0;

create_int_list :: func () -> Int_List
{
    result : Int_List;
    result.test = 4;
    result.first = null;
    result.last = null;
    return result;
}

list_append :: func (list: *Int_List, value: s64)
{
    element := new_element(value);

    if (element != null) {
        std.println("if (element != null)");
    }

    if (element == null) {
        std.println("if (element == null)");
    } else {
        std.println("! if (element == null)");
    }

    if (element) {
        std.println("if (element)");
    }

    return;
}

new_element :: func (value: s64) -> *Int_List_Element
{
    result : *Int_List_Element = null;

    if (_next_int_list_index_ < _INT_LIST_ELEMENT_COUNT_) {
        result = *_int_list_elements_[_next_int_list_index_];
        _next_int_list_index_ += 1;

        result.value = value;
    }

    return result;
}
