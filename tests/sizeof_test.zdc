
std :: import std;

main :: func() -> s64
{
    std.print("sizeof test\n");

    std.print("@sizeof(bool) = ");
    std.print_num(@sizeof(bool));
    std.print("\n");

    std.print("@sizeof(u8) = ");
    std.print_num(@sizeof(u8));
    std.print("\n");

    std.print("@sizeof(s8) = ");
    std.print_num(@sizeof(s8));
    std.print("\n");

    std.print("@sizeof(u16) = ");
    std.print_num(@sizeof(u16));
    std.print("\n");

    std.print("@sizeof(s16) = ");
    std.print_num(@sizeof(s16));
    std.print("\n");

    std.print("@sizeof(u32) = ");
    std.print_num(@sizeof(u32));
    std.print("\n");

    std.print("@sizeof(s32) = ");
    std.print_num(@sizeof(s32));
    std.print("\n");

    std.print("@sizeof(u64) = ");
    std.print_num(@sizeof(u64));
    std.print("\n");

    std.print("@sizeof(s64) = ");
    std.print_num(@sizeof(s64));
    std.print("\n");

    std.print("@sizeof(float) = ");
    std.print_num(@sizeof(float));
    std.print("\n");

    std.print("@sizeof(double) = ");
    std.print_num(@sizeof(double));
    std.print("\n\n");

    std.print("@sizeof(Vec2) = ");
    std.print_num(@sizeof(Vec2));
    std.print("\n");

    std.print("@sizeof(Vec2d) = ");
    std.print_num(@sizeof(Vec2d));
    std.print("\n");

    std.print("@sizeof(Vec3) = ");
    std.print_num(@sizeof(Vec3));
    std.print("\n");

    std.print("@sizeof(Vec3d) = ");
    std.print_num(@sizeof(Vec3d));
    std.print("\n");

    std.print("@sizeof(Aabb) = ");
    std.print_num(@sizeof(Aabb));
    std.print("\n");

    std.print("@sizeof(Aabb_alt) = ");
    std.print_num(@sizeof(Aabb_alt));
    std.print("\n\n");

    std.print("@sizeof(*void) = ");
    std.print_num(@sizeof(*void));
    std.print("\n");

    std.print("@sizeof(*u8) = ");
    std.print_num(@sizeof(*u8));
    std.print("\n");

    std.print("@sizeof(Entity) = ");
    std.print_num(@sizeof(Entity));
    std.print("\n");


    std.print("\n");
    return 0;
}

Entity :: struct
{
    name          : *u8;
    position      : Vec2;
    bounding_rect : Aabb;
}

Aabb :: struct
{
    position : Vec2;
    size     : Vec2;
}

Aabb_alt :: struct
{
    p1 : Vec2;
    p2 : Vec2;
}

Vec2 :: struct
{
    x : float;
    y : float; 
}

Vec2d :: struct
{
    x : double;
    y : double; 
}

Vec3 :: struct
{
    x : float;
    y : float; 
    z : float; 
}

Vec3d :: struct
{
    x : double;
    y : double; 
    z : double; 
}

#naked #noreturn _start :: func ()
{
    posix_call_main_and_exit();
}

#noreturn posix_call_main_and_exit :: func ()
{
    exit_code := main();
    @exit(exit_code);
}


