
strlen :: func (cstr: *u8) -> s64
{
    i := 0;
    while (cstr[i] != 0)
    {
        i = i + 1;
    }
    return i;
}

print :: func (cstr: *u8)
{
    @syscall(1, 1, cstr, strlen(cstr));
    return;
}

println :: func (cstr: *u8)
{
    print(cstr);
    nl : u8 = '\n';
    @syscall(1, 1, *nl, 1);
    return;
}

print_num :: func (n: s64)
{
    buf : [32]u8;
    i := 0;
    while (n > 0)
    {
        nc := @cast(u8, n % 10);
        buf[i] = nc + 48;
        i = i + 1;
        n = n / 10;
    }

    while (i > 0)
    {
        @syscall(1, 1, *buf[i - 1], 1);
        i = i - 1;
    }
    return;
}

print_float :: func (f: float)
{
    int_part := @cast(s32, f);
    print_num(int_part);
    print(".");

    it := 6;

    rem := f - int_part;
    rem = rem * 10;

    while (rem > 0.001)
    {
        if (it <= 0) return;

        int_part = @cast(s32, rem);
        print_num(int_part);

        rem = rem - int_part;
        rem = rem * 10;
        it = it - 1;
    }
    return;
}
