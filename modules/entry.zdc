
_std_ :: import std;
_os_  :: import os;

int  :: typedef s64;
char :: typedef u8;

pre_main :: func()
{
    _os_._open_default_io_handles();
    return;
}

#if (PLATFORM_WINDOWS) {

    mainCRTStartup :: func ()
    {
        pre_main();
        @exit(main());
    }

} #elseif (PLATFORM_LINUX) {

    #noreturn call_main_and_exit :: func ()
    {
        pre_main();
        @exit(main());
    }

    #naked #noreturn _start :: func ()
    {
        call_main_and_exit();
    }

} #else {
    @static_assert(false);
}

default_assert_handler :: func(cond: bool, file_name: *u8, line: s64)
{
    if (!cond) {
        // @TODO: We should print to stdout and use lower level print functions here, so
        //  we have the possibilty to assert from print itself.
        _std_.print("Assertion failed: ");
        _std_.print(file_name);
        _std_.print(":");
        _std_.print_numln(line);


        _std_.print("\n");
        _os_.abort();
    }
}
