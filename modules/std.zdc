
strlen :: func (cstr: *u8) -> s64 {
    i := 0;
    while (cstr[i] != 0) {
        i = i + 1;
    }
    return i;
}

os :: import os;

#if (PLATFORM_WINDOWS) {

    windows :: import windows;

    print :: func(str: *u8) {
        written : windows.DWORD;
        len := @cast(windows.DWORD, strlen(str));
        windows.WriteFile(os.stdout, str, len, *written, null);
    }

    print_char :: func (c: u8)
    {
        _c := c;
        written : windows.DWORD;
        windows.WriteFile(os.stdout, *_c, 1, *written, null);
    }

} #elseif (PLATFORM_LINUX) {

    print_len :: func(cstr: *u8, len: s64)  {
        @syscall(1, 1, cstr, len);
    }

    print :: func (cstr: *u8) {
        print_len(cstr, strlen(cstr));
    }

    print_char :: func (c: u8) {
        _c : u8 = c;
        @syscall(1, 1, *_c, 1);
    }
}
#else {
    @static_assert(false);
}

println :: func (cstr: *u8) {
    print(cstr);
    print("\n");
}

print_numln :: func (n: s64) {
    print_num(n);
    print_char('\n');
}

print_num :: func (n: s64) {

    buf : [32]u8;
    i := 0;

    if (n < 0)
    {
        n = -n;
        print_char('-');
    }
    else if (n == 0)
    {
        print_char('0');
        return;
    }

    while (n > 0)
    {
        nc := @cast(u8, n % 10);
        buf[i] = nc + 48;
        i = i + 1;
        n = n / 10;
    }

    while (i > 0)
    {
        print_char(buf[i - 1]);
        i = i - 1;
    }
}

print_float :: func (f: float)
{
    int_part := @cast(s32, f);
    print_num(int_part);
    print(".");

    it := 6;

    rem := f - @cast(float, int_part);
    rem = rem * 10;

    while (rem > 0.001) {

        if (it <= 0) break;

        int_part = @cast(s32, rem);
        print_num(int_part);

        rem = rem - @cast(float, int_part);
        rem = rem * 10;
        it = it - 1;
    }

    return;
}

print_double :: func (d: double)
{
    int_part := @cast(s64, d);
    print_num(int_part);
    print(".");

    it := 6;

    rem := d - @cast(double, int_part);
    rem = rem * 10;

    while (rem > 0.001)
    {
        if (it <= 0) break;

        int_part = @cast(s64, rem);
        print_num(int_part);

        rem = rem - @cast(double, int_part);
        rem = rem * 10;
        it = it - 1;
    }

    return;
}
