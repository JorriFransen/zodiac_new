
@offsetof

Generalize error reporting (so we can call it from byte code as well, and use the same api everywhere).

unions

Statements (function bodies) should remember their inferred return type, since an error might be reported on this in a later cycle. At the momement inferred return type will be null or type_void if the statement has been resolved in a previous cycle.

make jump if more like llvm's condbr

result of cmp ops should be bool

::TypedStructLiterals
  I think this was meant to parse this:
  p2 := Vec3(float) { 4, 5, 6 };
  This should probably be written as this anyways:
  p2 := cast(Vec3(float), {4, 5, 6 });
  or whatever the cast syntax will be

recursive functions
recursive structs
Syscall return values
Check call arg types
Copy structs on return (bytecode)
function overloads
lazy && and ||
|=, &=, ^=/~=

Custom allocator for stack frame allocls in interpreter

Linking with c runtime (entry point main instead of _start)

Inherit noreturn when a noreturn function is called

Command line option parsing
  - -cruntime
  - -print_scope (Scopes need to be parented to the global scope to make this work)

Print parameter types in bytecode printer

Windows build
  - Create msvc build
  - Document ninja/clang-cl build
     - Build ninja
     - Build llvm 
         - Start msvc 64 bit dev shell
         - Invoke cmake with -G Ninja and -DCMAKE_C[XX]_COMPILER=path/to/clang-cl
           Make sure to use linux compatible paths for the compiler path
           Make sure to use the 64 bit version of clang-cl
           Choose between Debug and Release for -DCMAKE_BUILD_TYPE=
     - Build zodiac
       - Start msvc 64 bit dev shell
       - Invoke cmake with -G ninja and the path to clang-cl like with the llvm build
       - Match the -DCMAKE_BUILD_TYPE= option with the llvm build
         (check if mismatch is possible like on linux)

UNREACHABLE instruction in our own bytecode.
Dont't store File Positions on ast nodes.

Allocate arrays with the correct size if its known:
    - function body statements

Build setup script
  - make/clean all scripts
  - Build llvm in debug and release (CC=clang CXX=clang++ cmake ../llvm-10.0.1.src -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_PARALLEL_LINK_JOBS=4)
